(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{256:function(a,t,s){"use strict";s.r(t);var n=s(28),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"语言规则和基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语言规则和基本操作"}},[a._v("#")]),a._v(" 语言规则和基本操作")]),a._v(" "),s("p",[a._v("Java这门语言有一些特殊的规定, 这些规定你应当遵守."),s("br"),a._v("\n可能有些规定不遵守也没关系, 但是请注意, 往往不遵守规则就会被人鄙视, 或者可能出现报错你也不知道为什么.")]),a._v(" "),s("h2",{attrs:{id:"无中文化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无中文化"}},[a._v("#")]),a._v(" 无中文化")]),a._v(" "),s("p",[a._v("不管你英语水平多垃圾, 作为代码, 你应当尽可能保证代码中"),s("strong",[a._v("不出现中文")]),a._v(".")]),a._v(" "),s("p",[a._v("开发过程中经常遇到因为中文的乱码问题, 如果为变量等命名时使用中文会导致代码“变得很丑”, 根本不会起到提升阅读性的目的. 如果你真想让代码是什么意思表述的清晰一些, 你应当用注释(马上就会提到)表示, 注释里你可以写中文."),s("br"),a._v("\n如果某个路径中出现中文, 可能会因为程序处理差异而出现各种各样你根本不知道是因为什么而导致的错误.")]),a._v(" "),s("p",[a._v("所以, 你应当尽可能使用英文字母来取代中文.")]),a._v(" "),s("h2",{attrs:{id:"注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),s("p",[a._v("在代码任何地方都可以插入注释, 注释能够起到解释说明代码的功能.")]),a._v(" "),s("p",[a._v("下面是两种注释的例子.")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("jia ru zhe shi yi hang dai ma"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这就是注释,我在这里瞎写东西, 程序照样运行")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//code code code code; 比如这行代码不想要了但是不舍得删, 注释就很好使")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//但是这样写注释只能是单行的, 其实也有多行注释")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/*\n就像这样,\n这一块都是注释\n里面随便写内容都可以!!\n*/")]),a._v("\n")])])]),s("p",[a._v("注意, 你不能多行注释套多行注释. 比如 "),s("code",[a._v("/* /**/ */")]),a._v(" 是不可以的, 你可以把单行注释放在多行注释内.")]),a._v(" "),s("h2",{attrs:{id:"域的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#域的概念"}},[a._v("#")]),a._v(" 域的概念")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("rinya"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bukkit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("helloworldplugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("bukkit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("plugin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JavaPlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HelloWorldPluginMain")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JavaPlugin")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onEnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("我们上个Step中写的这些代码, 你会发现其中有"),s("code",[a._v("{")]),a._v("和"),s("code",[a._v("}")]),a._v(". 花括号括起来的表示一个域."),s("br"),a._v("\n域并不是单独存在的, 左花括号"),s("code",[a._v("{")]),a._v("的前面往往有域的头部描述.")]),a._v(" "),s("p",[a._v("请注意, 你要用套娃的思路去理解域是怎样相互嵌套、并列的."),s("br"),a._v("\n比如"),s("code",[a._v("public class HelloWorldPluginMain extends JavaPlugin")]),a._v("后面对应了一个域, 这个域里包含了一个"),s("code",[a._v("@Override public void onEnable()")]),a._v("引起的一个域.")]),a._v(" "),s("h2",{attrs:{id:"大小写严格区分-分号是代码的结束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大小写严格区分-分号是代码的结束"}},[a._v("#")]),a._v(" 大小写严格区分, 分号是代码的结束")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello World!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("上一Step中我们编写了这样的一行代码, 其中除需要输出的"),s("code",[a._v("Hello World!")]),a._v("取决于你的目的以外, "),s("code",[a._v("System.out.println")]),a._v("里任何一个字母的大小写都是严格需要区分开的."),s("br"),a._v("\n尤其是"),s("code",[a._v("System.out.println")]),a._v(", 这个语句在Java中"),s("strong",[a._v("看似")]),a._v("不符合后面我们要提到的命名规则, 它有它的特殊性. 这是一句常用的输出语句, 你应当记住.")]),a._v(" "),s("p",[a._v("同时, 作为一句代码, 它以分号作为结束标志. Java中不能漏写分号.")]),a._v(" "),s("h2",{attrs:{id:"包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[a._v("#")]),a._v(" 包")]),a._v(" "),s("h3",{attrs:{id:"包的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包的作用"}},[a._v("#")]),a._v(" 包的作用")]),a._v(" "),s("p",[a._v("我们上个Step创建的"),s("code",[a._v("HelloWorldPluginMain")]),a._v("类其实有一个问题, 如果真的有一个人出于某些目的, 也创建了一个类叫"),s("code",[a._v("HelloWorldPluginMain")]),a._v(", 而你和他的插件都是非常常用的插件, 大家都会装. 这样有两个类名称一样, 会出现后一个被加载的插件无法被正常加载的情况."),s("br"),a._v("\n包(Package)就是用来解决这样的类名冲突问题的.")]),a._v(" "),s("p",[a._v("此外, 你可能见过有些人有这些习惯: 电脑里存的课件会存在一个文件夹里, 音乐会存另外一个文件夹里. 代码也是这样, 不同的类按照功能可以分为不同的类别, 包也有文件夹的作用."),s("br"),a._v("\n其实, 包本质就是文件夹. 这样你也就可以理解为什么包可以解决命名冲突问题了, 存不一样的文件夹里, 可不就解决了命名冲突问题了.")]),a._v(" "),s("p",[a._v("要注意的是, "),s("strong",[a._v("我不能说"),s("code",[a._v("testjava.demo.one.three")]),a._v("包里的类也在"),s("code",[a._v("testjava.demo.one")]),a._v("包内")]),a._v(", 在哪个包里就是在哪个包里, 这两个包没有包含关系.")]),a._v(" "),s("h3",{attrs:{id:"创建一个包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建一个包"}},[a._v("#")]),a._v(" 创建一个包")]),a._v(" "),s("p",[a._v("我们刚才创建的那个类包名是"),s("code",[a._v("rinya.bukkit.helloworldplugin")]),a._v(", 其实包名只要符合命名规则即可, 因为我叫"),s("code",[a._v("rinya")]),a._v(", 这是我的"),s("code",[a._v("bukkit")]),a._v("插件作品, 名字叫"),s("code",[a._v("helloworldplugin")]),a._v(",所以我给包名取了这个名字."),s("br"),a._v("\n其实从本质上来讲, "),s("code",[a._v(".")]),a._v("就是"),s("code",[a._v("\\")]),a._v(", 也就是相当于"),s("code",[a._v("rinya")]),a._v("文件夹里有"),s("code",[a._v("bukkit")]),a._v("文件夹里有"),s("code",[a._v("helloworldplugin")]),a._v("文件夹, 刚才的"),s("code",[a._v("HelloWorldPluginMain.java")]),a._v("文件就被我放在这个文件夹里了.")]),a._v(" "),s("p",[a._v("除了在创建类时手动输入包名外, 你还可以在Eclipse中这样创建一个包.")]),a._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",href:"https://i.loli.net/2020/03/29/hkK9jiAE27HCvoa.jpg",rel:"external nofollow"}},[s("img",{attrs:{src:"https://i.loli.net/2020/03/29/hkK9jiAE27HCvoa.jpg",alt:""}})])]),a._v(" "),s("h2",{attrs:{id:"命名规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命名规则"}},[a._v("#")]),a._v(" 命名规则")]),a._v(" "),s("p",[s("em",[a._v("你可能暂时不知道这些规则怎么用, 没关系, 你现在只需要知道有这个东西即可")])]),a._v(" "),s("p",[a._v("Java里名字不是乱起的. 起名首先是让人一看就知道这个东西是干什么用的.")]),a._v(" "),s("p",[a._v("还要注意, Java中所有的取名都有一些规范, 有一些必须遵守, 有一些不遵守程序一样可以运行, "),s("strong",[a._v("但是这是程序员心中极高尚的信仰, 信仰的光辉引领着我们要去遵守, 否则别人可能会认为你有问题")]),a._v(". 具体的命名规则如下:")]),a._v(" "),s("ol",[s("li",[a._v("大小写: 类名首字母大写、方法名首字母小写, 变量常量等首字母小写, 包名所有字母都小写.")]),a._v(" "),s("li",[a._v("仅允许使用字母、数字、下划线, 您还可以使用美元符号 ($), 但无论怎么取名, 第一个字符绝不能是数字. 其实中文字符是可以的, 但是不符合命名规范.")]),a._v(" "),s("li",[a._v("不允许与Java关键字重复, 例如你不能给某个东西起名叫“public”、“class”, 因为它们是Java保留的关键字.")]),a._v(" "),s("li",[a._v("Java严格区分大小写, 因此“Good”和“good”不是一个名字.")])])])}),[],!1,null,null,null);t.default=e.exports}}]);